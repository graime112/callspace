// Email —Å–µ—Ä–≤–∏—Å –¥–ª—è CallSpace
import nodemailer from 'nodemailer';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMTP
const SMTP_CONFIG = {
    // –î–ª—è Gmail
    gmail: {
        host: 'smtp.gmail.com',
        port: 587,
        secure: false,
        auth: {
            user: process.env.EMAIL_USER || 'your-email@gmail.com',
            pass: process.env.EMAIL_PASS || 'your-app-password'
        }
    },
    
    // –î–ª—è Outlook/Hotmail
    outlook: {
        host: 'smtp-mail.outlook.com',
        port: 587,
        secure: false,
        auth: {
            user: process.env.EMAIL_USER || 'your-email@outlook.com',
            pass: process.env.EMAIL_PASS || 'your-password'
        }
    },
    
    // –î–ª—è Yandex
    yandex: {
        host: 'smtp.yandex.ru',
        port: 587,
        secure: false,
        auth: {
            user: process.env.EMAIL_USER || 'your-email@yandex.ru',
            pass: process.env.EMAIL_PASS || 'your-password'
        }
    },
    
    // –î–ª—è Mail.ru
    mailru: {
        host: 'smtp.mail.ru',
        port: 587,
        secure: false,
        auth: {
            user: process.env.EMAIL_USER || 'your-email@mail.ru',
            pass: process.env.EMAIL_PASS || 'your-password'
        }
    }
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ email
function getEmailProvider(email) {
    const domain = email.split('@')[1].toLowerCase();
    
    if (domain.includes('gmail.com')) return 'gmail';
    if (domain.includes('outlook.com') || domain.includes('hotmail.com')) return 'outlook';
    if (domain.includes('yandex.ru')) return 'yandex';
    if (domain.includes('mail.ru')) return 'mailru';
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Gmail
    return 'gmail';
}

// –°–æ–∑–¥–∞–µ–º transporter
function createTransporter(email) {
    const provider = getEmailProvider(email);
    const config = SMTP_CONFIG[provider];
    
    console.log(`üìß Using ${provider} SMTP for ${email}`);
    
    return nodemailer.createTransporter(config);
}

// HTML —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
function createInvitationTemplate(userData, inviteUrl) {
    const { name, email, inviterName = 'CallSpace Team' } = userData;
    
    return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ CallSpace</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            background: white;
            border-radius: 10px;
            padding: 40px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .logo {
            width: 60px;
            height: 60px;
            background: #4F46E5;
            border-radius: 12px;
            margin: 0 auto 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            font-weight: bold;
        }
        .title {
            color: #4F46E5;
            font-size: 28px;
            margin: 0;
            font-weight: 600;
        }
        .subtitle {
            color: #666;
            font-size: 16px;
            margin: 10px 0 0;
        }
        .content {
            margin: 30px 0;
        }
        .greeting {
            font-size: 18px;
            margin-bottom: 20px;
        }
        .features {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin: 20px 0;
        }
        .features h3 {
            color: #4F46E5;
            margin-top: 0;
        }
        .features ul {
            margin: 0;
            padding-left: 20px;
        }
        .features li {
            margin: 8px 0;
        }
        .cta-button {
            display: inline-block;
            background: #4F46E5;
            color: white;
            text-decoration: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            margin: 20px 0;
            transition: background-color 0.2s;
        }
        .cta-button:hover {
            background: #4338CA;
        }
        .footer {
            text-align: center;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 14px;
        }
        .user-info {
            background: #e8f0fe;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
        }
        .user-info strong {
            color: #4F46E5;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">CS</div>
            <h1 class="title">CallSpace</h1>
            <p class="subtitle">–í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏</p>
        </div>
        
        <div class="content">
            <div class="greeting">
                –ü—Ä–∏–≤–µ—Ç, ${name}! üëã
            </div>
            
            <p>${inviterName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ CallSpace - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á.</p>
            
            <div class="user-info">
                <strong>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</strong><br>
                Email: ${email}<br>
                ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email.split('@')[0]}
            </div>
            
            <div class="features">
                <h3>üöÄ –ß—Ç–æ –≤–∞—Å –∂–¥–µ—Ç –≤ CallSpace:</h3>
                <ul>
                    <li>üìπ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏</li>
                    <li>üé§ –ß–µ—Ç–∫–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∑–≤—É–∫–∞</li>
                    <li>üñ•Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞</li>
                    <li>üí¨ –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏</li>
                    <li>üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏</li>
                    <li>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</li>
                </ul>
            </div>
            
            <div style="text-align: center;">
                <a href="${inviteUrl}" class="cta-button">
                    üéâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ CallSpace
                </a>
            </div>
            
            <p style="text-align: center; color: #666; font-size: 14px;">
                –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É: <br>
                <code style="background: #f0f0f0; padding: 2px 6px; border-radius: 4px;">${inviteUrl}</code>
            </p>
        </div>
        
        <div class="footer">
            <p>–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</p>
            <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –æ–∂–∏–¥–∞–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.</p>
            <p>¬© 2024 CallSpace. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
        </div>
    </div>
</body>
</html>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
export async function sendInvitationEmail(userData, inviteUrl) {
    const { name, email, inviterName } = userData;
    
    try {
        console.log(`üìß Sending invitation email to ${email}...`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email
        if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
            console.log('‚ö†Ô∏è Email not configured. Skipping email send.');
            console.log('üí° Set EMAIL_USER and EMAIL_PASS environment variables to enable email sending.');
            return { success: false, error: 'Email not configured' };
        }
        
        const transporter = createTransporter(email);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await transporter.verify();
        console.log('‚úÖ SMTP connection verified');
        
        const mailOptions = {
            from: `"CallSpace" <${process.env.EMAIL_USER}>`,
            to: email,
            subject: `üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ CallSpace –æ—Ç ${inviterName}`,
            html: createInvitationTemplate(userData, inviteUrl),
            text: `
–ü—Ä–∏–≤–µ—Ç, ${name}!

${inviterName} –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ CallSpace.

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:
Email: ${email}
ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email.split('@')[0]}

–°—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞: ${inviteUrl}

CallSpace - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–æ–≤ –∏ –æ–Ω–ª–∞–π–Ω-–≤—Å—Ç—Ä–µ—á.

¬© 2024 CallSpace
            `
        };
        
        const result = await transporter.sendMail(mailOptions);
        console.log(`‚úÖ Invitation email sent to ${email}:`, result.messageId);
        
        return { 
            success: true, 
            messageId: result.messageId,
            message: 'Invitation email sent successfully'
        };
        
    } catch (error) {
        console.error('‚ùå Error sending invitation email:', error);
        return { 
            success: false, 
            error: error.message,
            message: 'Failed to send invitation email'
        };
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email
export async function sendTestEmail(testEmail) {
    const userData = {
        name: 'Test User',
        email: testEmail,
        inviterName: 'CallSpace Team'
    };
    
    const inviteUrl = `http://localhost:3000/?user=${testEmail.split('@')[0]}`;
    
    return await sendInvitationEmail(userData, inviteUrl);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ email
export function checkEmailConfig() {
    const hasUser = !!process.env.EMAIL_USER;
    const hasPass = !!process.env.EMAIL_PASS;
    
    return {
        configured: hasUser && hasPass,
        hasUser,
        hasPass,
        message: hasUser && hasPass 
            ? 'Email is configured' 
            : 'Email not configured. Set EMAIL_USER and EMAIL_PASS environment variables.'
    };
}
