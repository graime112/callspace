#!/usr/bin/env node

// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
import { 
    addUser, 
    getAllUsers, 
    getUserById, 
    updateUser, 
    deleteUser,
    searchUsers,
    setUserOnline 
} from './server/user-management.js';

console.log('üß™ Testing CallSpace User Management System\n');

async function runTests() {
    try {
        // –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('1Ô∏è‚É£ Testing user creation...');
        
        const testUsers = [
            { id: 'test1', name: 'Test User 1', email: 'test1@example.com', avatar: 'T1', role: 'user' },
            { id: 'test2', name: 'Test User 2', email: 'test2@example.com', avatar: 'T2', role: 'admin' },
            { id: 'test3', name: 'Test User 3', email: 'test3@example.com', avatar: 'T3', role: 'user' }
        ];
        
        for (const userData of testUsers) {
            try {
                const user = await addUser(userData);
                console.log(`   ‚úÖ Created user: ${user.name} (${user.id})`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è User ${userData.id} might already exist: ${error.message}`);
            }
        }
        
        // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\n2Ô∏è‚É£ Testing user retrieval...');
        const allUsers = getAllUsers();
        console.log(`   üìä Total users: ${allUsers.length}`);
        
        // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('\n3Ô∏è‚É£ Testing user search...');
        const searchResults = searchUsers('test');
        console.log(`   üîç Found ${searchResults.length} users matching "test"`);
        
        // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
        console.log('\n4Ô∏è‚É£ Testing get user by ID...');
        const user = getUserById('test1');
        if (user) {
            console.log(`   üë§ Found user: ${user.name} (${user.email})`);
        } else {
            console.log('   ‚ùå User not found');
        }
        
        // –¢–µ—Å—Ç 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n5Ô∏è‚É£ Testing user update...');
        try {
            const updatedUser = await updateUser('test1', { name: 'Updated Test User 1' });
            console.log(`   ‚úÖ Updated user: ${updatedUser.name}`);
        } catch (error) {
            console.log(`   ‚ùå Update failed: ${error.message}`);
        }
        
        // –¢–µ—Å—Ç 6: –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å
        console.log('\n6Ô∏è‚É£ Testing online status...');
        setUserOnline('test1', true);
        setUserOnline('test2', true);
        setUserOnline('test3', false);
        
        const onlineUsers = allUsers.filter(u => u.online);
        console.log(`   üü¢ Online users: ${onlineUsers.length}`);
        
        // –¢–µ—Å—Ç 7: API endpoints (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
        console.log('\n7Ô∏è‚É£ Testing API endpoints...');
        try {
            const response = await fetch('http://localhost:3000/api/users');
            if (response.ok) {
                const data = await response.json();
                console.log(`   üåê API working: ${data.users.length} users via API`);
            } else {
                console.log('   ‚ö†Ô∏è API not available (server not running?)');
            }
        } catch (error) {
            console.log('   ‚ö†Ô∏è API not available (server not running?)');
        }
        
        // –¢–µ—Å—Ç 8: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\n8Ô∏è‚É£ Cleaning up test data...');
        for (const userData of testUsers) {
            try {
                await deleteUser(userData.id);
                console.log(`   üóëÔ∏è Deleted test user: ${userData.id}`);
            } catch (error) {
                console.log(`   ‚ö†Ô∏è Could not delete ${userData.id}: ${error.message}`);
            }
        }
        
        console.log('\n‚úÖ All tests completed!');
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests();
