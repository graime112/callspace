#!/usr/bin/env node

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è CallSpace
import { getAllUsers, addUser } from './server/user-management.js';

console.log('üîç CallSpace System Diagnostics\n');

async function runDiagnostics() {
    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('1Ô∏è‚É£ Checking user management system...');
        const users = getAllUsers();
        console.log(`   üìä Total users: ${users.length}`);
        
        if (users.length > 0) {
            console.log('   üë• Users:');
            users.forEach(user => {
                console.log(`      - ${user.name} (${user.id}) - ${user.email}`);
            });
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
        console.log('\n2Ô∏è‚É£ Checking API endpoints...');
        try {
            const response = await fetch('http://localhost:3000/api/users');
            if (response.ok) {
                const data = await response.json();
                console.log(`   ‚úÖ API working: ${data.users.length} users via API`);
            } else {
                console.log(`   ‚ùå API error: ${response.status} ${response.statusText}`);
            }
        } catch (error) {
            console.log(`   ‚ùå API not available: ${error.message}`);
            console.log('   üí° Make sure server is running: cd server && node server.js');
        }
        
        // 3. –¢–µ—Å—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('\n3Ô∏è‚É£ Testing user invitation...');
        try {
            const testEmail = 'test@example.com';
            const response = await fetch('http://localhost:3000/api/users/invite', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: testEmail,
                    name: 'Test User',
                    inviterId: 'admin'
                })
            });
            
            if (response.ok) {
                const data = await response.json();
                console.log(`   ‚úÖ Invitation test successful: ${data.user.name}`);
                
                // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try {
                    await fetch(`http://localhost:3000/api/users/${data.user.id}`, {
                        method: 'DELETE'
                    });
                    console.log('   üóëÔ∏è Test user cleaned up');
                } catch (cleanupError) {
                    console.log('   ‚ö†Ô∏è Could not clean up test user');
                }
            } else {
                const errorData = await response.json();
                console.log(`   ‚ùå Invitation test failed: ${errorData.error}`);
            }
        } catch (error) {
            console.log(`   ‚ùå Invitation test error: ${error.message}`);
        }
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        console.log('\n4Ô∏è‚É£ Checking system files...');
        const fs = await import('fs/promises');
        const path = await import('path');
        
        const filesToCheck = [
            'server/user-management.js',
            'server/users.json',
            'client/admin.html',
            'add-user.js'
        ];
        
        for (const file of filesToCheck) {
            try {
                await fs.access(file);
                console.log(`   ‚úÖ ${file} exists`);
            } catch {
                console.log(`   ‚ùå ${file} missing`);
            }
        }
        
        // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\n5Ô∏è‚É£ Recommendations:');
        
        if (users.length === 0) {
            console.log('   üí° No users found. Add some users using:');
            console.log('      - Web interface: http://localhost:3000/admin.html');
            console.log('      - CLI: node add-user.js add john "John Doe" john@example.com');
        }
        
        console.log('   üí° Admin panel: http://localhost:3000/admin.html');
        console.log('   üí° Messenger: http://localhost:3000/messenger.html');
        console.log('   üí° Restart server: ./restart-server.sh');
        
        console.log('\n‚úÖ Diagnostics completed!');
        
    } catch (error) {
        console.error('‚ùå Diagnostic failed:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
runDiagnostics();
